{"version":3,"sources":["webpack:///./src/posts/791788145.md","webpack:///./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"mappings":"gOAOaA,EAAe,CAC1B,MAAS,aACT,KAAQ,UACR,KAAQ,2BACR,KAAQ,CAAC,MACT,WAAc,CAAC,OACf,SAAY,CAAC,QAETC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,cALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,wCACA,2CACA,yBAAK,oCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,8JAML,sCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,qXAqBL,oIACA,mEACA,yIACA,gEACA,+CACA,4CACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,uGASL,4FACA,iFACA,uCACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,2LAQL,wGACA,iDACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,iBADZ,0fA6BL,qGACA,iCAAc,iCAAGA,WAAW,KAAQ,CAChC,KAAQ,sCADE,uCAOlBJ,EAAWK,gBAAiB,G,kCCvHb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EAZT","file":"component---src-posts-791788145-md-72c6221166c264c38b1b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"实现一个环境路径动画\",\n  \"slug\": 791788145,\n  \"date\": \"2021-01-22T07:58:29.000Z\",\n  \"tags\": [\"标签\"],\n  \"categories\": [\"未分类\"],\n  \"keywords\": [\"关键册\"]\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h2>{`设置头像按照环形持续运动`}</h2>\n    <p>{`定义一个简单的 HTML 结构：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"wrap\">\n  <img class=\"avatar\" src=\"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=320178652,790985626&fm=27&gp=0.jpg\" />\n</div>\n`}</code></pre>\n    <p>{`我们先来写下 CSS：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.wrap {\n  width: 300px;\n  height: 300px;\n  border-radius: 50%;\n  background: #007fff;\n}\n.avatar {\n  display: block;\n  margin: 0 auto;\n  width: 50px;\n  height: 50px;\n  border-radius: 50%;\n  transform-origin: 50% 150px; /** 150px 是因为父元素 .wrap 宽度等于 300px */\n  animation: spin 8s infinite linear;\n}\n@keyframes spin {\n  to { transform: rotate(1turn); }\n}\n`}</code></pre>\n    <p>{`这里要解释一点，即 .avatar 需要居中，所以才设置了 margin: 0 auto，这样我们在设置transform-origin: 50% 150px 才能使其原点居于父元素中心点，从而围绕该原点旋转。`}</p>\n    <p>{`到现在为止，我们已经成功让该头像围绕环形路径进行旋转了，但是我们还想进一步优化。`}</p>\n    <p>{`如果你仔细观察，会发现，头像在围绕环形运动的时候，其自身也会进行旋转，这就会到导致其旋转到 180 度的时候（即 .wrap 底边中心处），头像朝向下方，我们想要其头像不管何时其朝向都为上，换句话说，头像自身不允许旋转。`}</p>\n    <p>{`或许你可能会说，这并不会影响什么，但是，如果是文字呢？那岂不是影响也阅读。`}</p>\n    <h2>{`实现头像朝向始终朝上，取消头像自身旋转`}</h2>\n    <p>{`或许你使用或见过下面这段 CSS：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.box {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n`}</code></pre>\n    <p>{`上面的 CSS 使得 .box 元素水平垂直居中，核心点通过 translate(-50%, -50%) 来抵消自身一半的偏移量。`}</p>\n    <p>{`既然，有了抵消的思想，我们也可以借助 .avatar 外层元素的反向旋转来抵消 .avatar 的正向旋转。`}</p>\n    <p>{`修改下 HTML 结构：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-html\"\n      }}>{`<div class=\"wrap\">\n    <div class=\"avatar\">\n        <img src=\"https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=320178652,790985626&fm=27&gp=0.jpg\" />\n    </div>\n</div>\n`}</code></pre>\n    <p>{`一般的，对于静态元素，我们可以指定具体的值来抵消，比如 60deg，可以用 -60deg（或300deg）来抵消，但是这里我们是动态的，肯定不可能这么写。`}</p>\n    <p>{`对于动态运动的，如果你理解了，可能会更简单：`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.wrap {\n  width: 300px;\n  height: 300px;\n  border-radius: 50%;\n  background: #007fff;\n}\n.avatar {\n  width: 50px;\n  height: 50px;\n  margin: 0 auto;\n  border-radius: 50%;\n  overflow: hidden;\n  transform-origin: 50% 150px;\n  animation: spin 8s infinite linear;\n}\n.avatar > img {\n  width: 50px;\n  height: 50px;\n  animation: spin-reverse 8s infinite linear;\n}\n@keyframes spin {\n  to { transform: rotate(1turn); }\n}\n@keyframes spin-reverse {\n  from { transform: rotate(1turn); }\n}\n`}</code></pre>\n    <p>{`在上面的 CSS 中，我们新定义了一个 spin-reverse 反向动画，一个结束，一个开始，实现运动抵消，进一步达到始终保持头像正确朝向的效果。`}</p>\n    <p>{`在线DEMO：`}<a parentName=\"p\" {...{\n        \"href\": \"https://codepen.io/hcx/pen/VoLjaP\"\n      }}>{`https://codepen.io/hcx/pen/VoLjaP`}</a></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"sourceRoot":""}